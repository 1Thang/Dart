import 'dart:convert';
import 'dart:io';

class Product {
  int id;
  String name;
  int quantity;
  double price;
  String size;
  bool status;
  DateTime importDate;

  Product({
    required this.id,
    required this.name,
    required this.quantity,
    required this.price,
    required this.size,
    required this.status,
    required this.importDate,
  });

  Map<String, dynamic> toJson() => {
        'id': id,
        'name': name,
        'quantity': quantity,
        'price': price,
        'size': size,
        'status': status,
        'importDate': importDate.toIso8601String(),
      };

  factory Product.fromJson(Map<String, dynamic> json) => Product(
        id: json['id'],
        name: json['name'],
        quantity: json['quantity'],
        price: json['price'],
        size: json['size'],
        status: json['status'],
        importDate: DateTime.parse(json['importDate']),
      );

  void display() {
    print(
        'ID: $id | T√™n: $name | SL: $quantity | Gi√°: \$${price.toStringAsFixed(2)} | Size: $size | T√¨nh tr·∫°ng: ${status ? "M·ªõi" : "C≈©"} | Ng√†y: ${importDate.day}/${importDate.month}/${importDate.year}');
  }
}

List<Product> productList = [];
int nextId = 1;

void main() async {
  while (true) {
    print('\n====== MENU ======');
    print('1. Th√™m s·∫£n ph·∫©m');
    print('2. S·ª≠a s·∫£n ph·∫©m');
    print('3. X√≥a s·∫£n ph·∫©m');
    print('4. Duy·ªát danh s√°ch s·∫£n ph·∫©m');
    print('5. L∆∞u v√†o file');
    print('6. M·ªü file');
    print('7. Tho√°t');
    stdout.write('Ch·ªçn: ');
    var choice = stdin.readLineSync();

    switch (choice) {
      case '1':
        addProduct();
        break;
      case '2':
        editProduct();
        break;
      case '3':
        deleteProduct();
        break;
      case '4':
        viewAllProducts();
        break;
      case '5':
        await saveToFile();
        break;
      case '6':
        await loadFromFile();
        break;
      case '7':
        return;
      default:
        print('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!');
    }
  }
}

void addProduct() {
  stdout.write('T√™n s·∫£n ph·∫©m: ');
  String name = stdin.readLineSync() ?? '';
  if (name.length < 2 || name.length > 32) {
    print('‚ùå T√™n ph·∫£i t·ª´ 2-32 k√Ω t·ª±!');
    return;
  }

  stdout.write('S·ªë l∆∞·ª£ng: ');
  int quantity = int.tryParse(stdin.readLineSync() ?? '') ?? -1;
  if (quantity < 0) {
    print('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!');
    return;
  }

  stdout.write('ƒê∆°n gi√°: ');
  double price = double.tryParse(stdin.readLineSync() ?? '') ?? -1;
  if (price < 0) {
    print('‚ùå ƒê∆°n gi√° kh√¥ng h·ª£p l·ªá!');
    return;
  }

  stdout.write('K√≠ch c·ª° (S, M, L, X): ');
  String size = stdin.readLineSync() ?? '';
  if (!['S', 'M', 'L', 'X'].contains(size)) {
    print('‚ùå K√≠ch c·ª° kh√¥ng h·ª£p l·ªá!');
    return;
  }

  stdout.write('T√¨nh tr·∫°ng (true=m·ªõi, false=c≈©): ');
  bool status = stdin.readLineSync()?.toLowerCase() == 'true';

  stdout.write('Ng√†y nh·∫≠p (dd/MM/yyyy): ');
  String dateInput = stdin.readLineSync() ?? '';
  DateTime? date;
  try {
    List<String> parts = dateInput.split('/');
    if (parts.length != 3) throw FormatException();
    int day = int.parse(parts[0]);
    int month = int.parse(parts[1]);
    int year = int.parse(parts[2]);
    date = DateTime(year, month, day);
  } catch (e) {
    print('‚ùå Ng√†y nh·∫≠p kh√¥ng h·ª£p l·ªá! ƒê·ªãnh d·∫°ng ƒë√∫ng l√† dd/MM/yyyy (VD: 20/06/2025)');
    return;
  }

  productList.add(Product(
    id: nextId++,
    name: name,
    quantity: quantity,
    price: price,
    size: size,
    status: status,
    importDate: date,
  ));
  print('‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m.');
}

void editProduct() {
  stdout.write('Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn s·ª≠a: ');
  int id = int.tryParse(stdin.readLineSync() ?? '') ?? -1;
  var index = productList.indexWhere((p) => p.id == id);
  if (index == -1) {
    print('‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!');
    return;
  }

  var product = productList[index];

  print('S·ª≠a th√¥ng tin (b·ªè tr·ªëng n·∫øu kh√¥ng ƒë·ªïi):');
  stdout.write('T√™n m·ªõi: ');
  String newName = stdin.readLineSync() ?? '';
  if (newName.isNotEmpty) product.name = newName;

  stdout.write('S·ªë l∆∞·ª£ng m·ªõi: ');
  String? qtyInput = stdin.readLineSync();
  if (qtyInput != null && qtyInput.isNotEmpty)
    product.quantity = int.tryParse(qtyInput) ?? product.quantity;

  stdout.write('Gi√° m·ªõi: ');
  String? priceInput = stdin.readLineSync();
  if (priceInput != null && priceInput.isNotEmpty)
    product.price = double.tryParse(priceInput) ?? product.price;
    stdout.write('K√≠ch c·ª° m·ªõi (S, M, L, X): ');
    String? sizeInput = stdin.readLineSync();
    if (sizeInput != null && sizeInput.isNotEmpty) {
        if (['S', 'M', 'L', 'X'].contains(sizeInput)) {
            product.size = sizeInput;
        } else {
            print('‚ùå K√≠ch c·ª° kh√¥ng h·ª£p l·ªá!');
            return;
        }
        }
    stdout.write('T√¨nh tr·∫°ng m·ªõi (true=m·ªõi, false=c≈©): ');
    String? statusInput = stdin.readLineSync();
    if (statusInput != null && statusInput.isNotEmpty) {
        product.status = statusInput.toLowerCase() == 'true';
    }
    stdout.write('Ng√†y nh·∫≠p m·ªõi (dd/MM/yyyy): ');
    String? dateInput = stdin.readLineSync();
    if (dateInput != null && dateInput.isNotEmpty) {
        try {
            List<String> parts = dateInput.split('/');
            if (parts.length != 3) throw FormatException();
            int day = int.parse(parts[0]);
            int month = int.parse(parts[1]);
            int year = int.parse(parts[2]);
            product.importDate = DateTime(year, month, day);
        } catch (e) {
            print('‚ùå Ng√†y nh·∫≠p kh√¥ng h·ª£p l·ªá! ƒê·ªãnh d·∫°ng ƒë√∫ng l√† dd/MM/yyyy (VD: 20/06/2025)');
            return;
        }
    }
    productList[index] = product;
  print('‚úÖ ƒê√£ c·∫≠p nh·∫≠t.');
}

void deleteProduct() {
  stdout.write('Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn x√≥a: ');
  int id = int.tryParse(stdin.readLineSync() ?? '') ?? -1;
  int before = productList.length;
  productList.removeWhere((p) => p.id == id);
  if (productList.length < before) {
    print('‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m.');
  } else {
    print('‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!');
  }
}

void viewAllProducts() {
  if (productList.isEmpty) {
    print('üì¶ Danh s√°ch s·∫£n ph·∫©m r·ªóng.');
  } else {
    print('üìã Danh s√°ch s·∫£n ph·∫©m:');
    for (var p in productList) {
      p.display();
    }
  }
}

Future<void> saveToFile() async {
  File file = File('products.json');
  String jsonData = jsonEncode(productList.map((p) => p.toJson()).toList());
  await file.writeAsString(jsonData);
  print('‚úÖ ƒê√£ l∆∞u v√†o file.');
}

Future<void> loadFromFile() async {
  File file = File('products.json');
  if (!await file.exists()) {
    print('‚ùå File kh√¥ng t·ªìn t·∫°i.');
    return;
  }
  String jsonData = await file.readAsString();
  List<dynamic> jsonList = jsonDecode(jsonData);
  productList = jsonList.map((e) => Product.fromJson(e)).toList();

  // T√≠nh l·∫°i ID ti·∫øp theo (n·∫øu c√≥ d·ªØ li·ªáu)
  if (productList.isNotEmpty) {
    nextId = productList.map((p) => p.id).reduce((a, b) => a > b ? a : b) + 1;
  }

  print('‚úÖ ƒê√£ ƒë·ªçc d·ªØ li·ªáu t·ª´ file.');
  productList.forEach((p) => p.display());
}
